name: Generate executables and post them to release

on:
  release:
    types: [published]
  workflow_dispatch:
  
permissions:
  contents: write

jobs:
  # generate-windows-executables:
  #   name: Build & publish for ${{ matrix.name }}
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       # name: [i686-pc-windows-gnu, x86_64-pc-windows-gnu, x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
  #       name: [x86_64-pc-windows-gnu, x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: stable
  #         targets: ${{ matrix.name }}

  #     - name: Set vcpkg root
  #       run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append

  #     - name: Install OpenSSL for i686-pc-windows-gnu
  #       run: vcpkg install openssl:x86-windows-static
  #       if: matrix.name == 'i686-pc-windows-gnu'

  #     - name: Install OpenSSL for x86_64-pc-windows-gnu
  #       run: vcpkg install openssl:x64-windows-static
  #       if: matrix.name == 'x86_64-pc-windows-gnu'

  #     - name: Install OpenSSL for x86_64-pc-windows-msvc
  #       run: vcpkg install openssl:x64-windows
  #       if: matrix.name == 'x86_64-pc-windows-msvc'

  #     - name: Install OpenSSL for aarch64-pc-windows-msvc
  #       run: vcpkg install openssl:arm64-windows
  #       if: matrix.name == 'aarch64-pc-windows-msvc'

  #     - name: Get RTPM version 
  #       id: rtpm_version
  #       shell: pwsh
  #       run: |
  #         $version = (Get-Content .\Cargo.toml | Select-String -Pattern '^\s*version\s*=\s*"(\d+\.\d+\.\d+)"' | ForEach-Object { $_.Matches.Groups[1].Value })
  #         echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT

  #     - name: Use GitHub cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Build release
  #       run: cargo build --release --locked --target ${{ matrix.name }}

  #     - name: Upload executable to releases
  #       uses: Asthowen/UploadReleaseAsset@main
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         release_tag: ${{ steps.rtpm_version.outputs.APP_VERSION }}
  #         asset_path: ./target/${{ matrix.name }}/release/rtpm.exe
  #         asset_name: rtpm-${{ steps.rtpm_version.outputs.APP_VERSION }}-${{ matrix.name }}.exe
  #         asset_content_type: application/octet-stream

  generate-linux-freebsd-executables:
    name: Build & publish for ${{ matrix.target }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust:
          - stable
        target:
          # - x86_64-unknown-freebsd
          # - i686-unknown-freebsd
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          - i586-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - mips-unknown-linux-gnu
          - mips64-unknown-linux-gnuabi64
          - mips64el-unknown-linux-gnuabi64
          - mipsel-unknown-linux-gnu
          - powerpc-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        run: rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}

      - name: Install cross-compilation tools
        uses: Asthowen/setup-cross-toolchain-action@main
        with:
          target: ${{ matrix.target }}
        if: matrix.target != 'i686-unknown-linux-musl' && matrix.target != 'x86_64-unknown-linux-musl'

      - name: Installing dependencies for i686-unknown-linux-musl & x86_64-unknown-linux-musl
        run: sudo apt update && sudo apt install musl-dev musl-tools -y
        if: matrix.target == 'i686-unknown-linux-musl' || matrix.target == 'x86_64-unknown-linux-musl'

      - name: Install toolchain for i686-unknown-linux-musl & x86_64-unknown-linux-musl
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
        if: matrix.target == 'i686-unknown-linux-musl' || matrix.target == 'x86_64-unknown-linux-musl'
          
      - name: Use GitHub cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Get RTPM version
        id: rtpm_version
        run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Upload executable to releases
        uses: Asthowen/UploadReleaseAsset@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_tag: ${{ steps.rtpm_version.outputs.APP_VERSION }}
          asset_path: ./target/${{ matrix.target }}/release/rtpm
          asset_name: rtpm-${{ steps.rtpm_version.outputs.APP_VERSION }}-${{ matrix.target }}
          asset_content_type: application/octet-stream

  # generate-macos-executables:
  #   name: Build & publish for ${{ matrix.name }}
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       name: [x86_64-apple-darwin, aarch64-apple-darwin]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: stable
  #         targets: ${{ matrix.name }}

  #     - name: Get RtopPluginManager version
  #       id: rtpm_version
  #       run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

  #     - name: Use GitHub cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Build release
  #       run: cargo build --release --locked --target ${{ matrix.name }}

  #     - name: Upload executable to releases
  #       uses: Asthowen/UploadReleaseAsset@main
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         release_tag: ${{ steps.rtpm_version.outputs.APP_VERSION }}
  #         asset_path: ./target/${{ matrix.name }}/release/rtpm
  #         asset_name: rtpm-${{ steps.rtpm_version.outputs.APP_VERSION }}-${{ matrix.name }}
  #         asset_content_type: application/octet-stream

  # generate-linux-executables:
  #   name: Build & publish for ${{ matrix.name }}
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix:
  #       name: [aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, i686-unknown-linux-gnu, i686-unknown-linux-musl, mips-unknown-linux-gnu, mips64-unknown-linux-gnuabi64, mips64el-unknown-linux-gnuabi64, mipsel-unknown-linux-gnu, powerpc-unknown-linux-gnu, arm-unknown-linux-gnueabi, x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install toolchain
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: stable
  #         targets: ${{ matrix.name }}

  #     - name: Installing dependencies for OpenSSL
  #       run: |
  #         sudo add-apt-repository universe
  #         sudo dpkg --add-architecture i386 
  #         sudo apt update
  #         sudo apt install gcc-multilib g++-multilib libssl-dev:i386
  #         # according to the doc https://docs.rs/openssl/0.10.36/openssl/#manual
  #         export OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu/
  #         export OPENSSL_INCLUDE_DIR=/usr/include/openssl/
  #       if: matrix.name == 'i686-unknown-linux-gnu' || matrix.name == 'i686-unknown-linux-musl'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt install gcc-arm* make git-core ncurses-dev -y
  #       if: matrix.name == 'armv7-unknown-linux-gnueabihf' || matrix.name == 'arm-unknown-linux-gnueabi'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt install gcc-arm* make git-core ncurses-dev -y
  #       if: matrix.name == 'armv7-unknown-linux-gnueabihf' || matrix.name == 'arm-unknown-linux-gnueabi'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt update && sudo apt install gcc-aarch64-linux-gnu -y
  #       if: matrix.name == 'aarch64-unknown-linux-gnu'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt update && sudo apt install gcc-mips-linux-gnu -y
  #       if: matrix.name == 'mips-unknown-linux-gnu' || matrix.name == 'mips64-unknown-linux-gnuabi64'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt update && sudo apt install gcc-mipsel-linux-gnu gcc-mips64el-linux-gnuabi64 -y
  #       if: matrix.name == 'mips64el-unknown-linux-gnuabi64' || matrix.name == 'mipsel-unknown-linux-gnu'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt update && sudo apt install gcc-powerpc-linux-gnu -y
  #       if: matrix.name == 'powerpc-unknown-linux-gnu'

  #     - name: Installing dependencies for OpenSSL
  #       run: sudo apt update && sudo apt install musl-dev musl-tools -y
  #       if: matrix.name == 'i686-unknown-linux-musl' || matrix.name == 'x86_64-unknown-linux-musl'

  #     - name: Get RTPM version
  #       id: rtpm_version
  #       run: |
  #         echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

  #     - name: Use GitHub cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Build release
  #       run: cargo build --release --locked --target ${{ matrix.name }}

  #     - name: Upload executable to releases
  #       uses: Asthowen/UploadReleaseAsset@main
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         release_tag: ${{ steps.rtpm_version.outputs.APP_VERSION }}
  #         asset_path: ./target/${{ matrix.name }}/release/rtpm
  #         asset_name: rtpm-${{ steps.rtpm_version.outputs.APP_VERSION }}-${{ matrix.name }}
  #         asset_content_type: application/octet-stream